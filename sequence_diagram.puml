
@startuml RealTimeHeartRateSystem

actor User

participant "Display Program" as DP
participant "Active TSDB" as ActiveDB
participant "Standby TSDB" as StandbyDB
participant "correcterHR.py" as Preprocessor
participant "producer.py" as Producer
participant "Kafka Broker" as Kafka
participant "consumerMaster.py" as ConsumerMaster
participant "consumerStandBy.py" as ConsumerStandby

== Real-Time Visualization ==

User -> DP : Select Bed Number (e.g., Bed 603)
activate User
activate DP
DP -> ActiveDB : Query Real-Time Data for Bed 603
activate ActiveDB
ActiveDB --> DP : Return Data : ACK
deactivate ActiveDB

alt Master TSDB Fails
    DP -> StandbyDB : Fallback Query for Bed 603
    activate StandbyDB
    StandbyDB --> DP : Fallback Data : ACK
    deactivate StandbyDB
end

DP -> User : Plot Real-Time Heart Rate Graph
deactivate DP

== Historical Data Fetch (Optional) ==
User -> DP : Request Historical Data for Bed 603
activate DP
DP -> ActiveDB : Query 24h Historical Data
activate ActiveDB
ActiveDB --> DP : Return Data : ACK
deactivate ActiveDB
DP -> User : Plot Historical Graph
deactivate DP
deactivate User

== Background: Data Pipeline ==

Preprocessor -> Preprocessor : Extract Data (correcterHR.py)
activate Preprocessor
Preprocessor --> Producer : Output CSV (extracted_hr_data.csv)
deactivate Preprocessor

Producer -> Kafka : Stream JSON Records
activate Producer
Kafka --> Producer : ACK
deactivate Producer

Kafka -> ConsumerMaster : Deliver Message
Kafka -> ConsumerStandby : Mirror Message

activate ConsumerMaster
ConsumerMaster -> ActiveDB : Write Heart Rate Data
ActiveDB --> ConsumerMaster : ACK
ConsumerMaster --> Kafka : ACK
deactivate ConsumerMaster

activate ConsumerStandby
ConsumerStandby -> StandbyDB : Write Backup Data
StandbyDB --> ConsumerStandby : ACK
ConsumerStandby --> Kafka : ACK
deactivate ConsumerStandby

@enduml
